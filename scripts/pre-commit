#!/usr/bin/env node

/**
 * Pre-commit hook for champion-trading-automation
 * This hook runs ESLint and the build process before allowing commits
 * to ensure code quality and prevent broken code from being committed
 */

import { execSync } from 'child_process';

// Check if we should skip the checks
if (process.env.SKIP_BUILD_CHECK === '1') {
  console.log('üîÑ Skipping pre-commit checks due to SKIP_BUILD_CHECK environment variable');
  process.exit(0);
}

console.log('üîç Running pre-commit hook...');

// Step 1: Run ESLint to check for syntax errors
console.log('üßπ Running ESLint to check for syntax errors...');
try {
  execSync('npm run lint', { stdio: 'inherit' });
  console.log('‚úÖ ESLint check passed!');
} catch (error) {
  console.error('‚ùå ESLint check failed! Commit aborted.');
  console.error('');
  console.error('Please fix the syntax errors before committing your changes.');
  console.error('');
  console.error('If you need to bypass this check in an emergency, use:');
  console.error('  git commit --no-verify');
  console.error('or');
  console.error('  SKIP_BUILD_CHECK=1 git commit');
  
  process.exit(1);
}

// Step 2: Run the build process to check for build errors
console.log('üèóÔ∏è Building project to verify there are no build errors...');
try {
  execSync('npm run build', { stdio: 'inherit' });
  console.log('‚úÖ Build successful!');
  console.log('');
  console.log('‚úÖ All pre-commit checks passed! Proceeding with commit...');
  process.exit(0);
} catch (error) {
  console.error('‚ùå Build failed! Commit aborted.');
  console.error('');
  console.error('Please fix the build errors before committing your changes.');
  console.error('');
  console.error('If you need to bypass this check in an emergency, use:');
  console.error('  git commit --no-verify');
  console.error('or');
  console.error('  SKIP_BUILD_CHECK=1 git commit');
  
  process.exit(1);
}
